/*!
 * -------------------------------------------
 * Copyright (c) 2019, Horizon Robotics, Inc.
 * All rights reserved.
 * \File     sample_plugin.cpp
 * \Author Songshan Gong
 * \Mail     songshan.gong@horizon.ai
 * \Version  1.0.0.0
 * \Date     2019-07-30
 * \Brief    Sample custom plugin
 * \DO NOT MODIFY THIS COMMENT, \
 * \WHICH IS AUTO GENERATED BY EDITOR
 * -------------------------------------------
 */

#include <signal.h>
#include <unistd.h>
#include <iostream>
#include <sstream>

#include "hbipcplugin/hbipcplugin.h"
#include "hobotlog/hobotlog.hpp"
#include "smartplugin/smartplugin.h"
#include "vioplugin/vioplugin.h"

using horizon::vision::xpluginflow::XPluginAsync;
using horizon::vision::xpluginflow::XPluginFlowMessage;
using horizon::vision::xpluginflow::XPluginFlowMessagePtr;
using std::chrono::milliseconds;

using horizon::vision::xpluginflow::hbipcplugin::HbipcPlugin;
using horizon::vision::xpluginflow::smartplugin::SmartPlugin;
using horizon::vision::xpluginflow::vioplugin::VioPlugin;

struct SmartContext {
  std::vector<std::shared_ptr<XPluginAsync> > plugins;
  bool exit;
  SmartContext() : exit(false) { plugins.clear(); }
};

SmartContext g_ctx;

static void signal_handle(int param) {
  std::cout << "recv signal " << param << ", stop" << std::endl;
  if (param == SIGINT) {
    g_ctx.exit = true;
  }
}

int main(int argc, char** argv) {
  if (argc < 2) {
    std::cout << "Usage: smart_main  [-i/-d/-w/-f] xroc_config_file"
              << std::endl;
    return 0;
  }

  std::string config_file;
  if (argc == 2) {
    config_file = std::string(argv[1]);
  } else {
    std::string log_level(argv[1]);
    if (log_level == "-i") {
      SetLogLevel(HOBOT_LOG_INFO);
    } else if (log_level == "-d") {
      SetLogLevel(HOBOT_LOG_DEBUG);
    } else if (log_level == "-w") {
      SetLogLevel(HOBOT_LOG_WARN);
    } else if (log_level == "-e") {
      SetLogLevel(HOBOT_LOG_ERROR);
    } else if (log_level == "-f") {
      SetLogLevel(HOBOT_LOG_FATAL);
    } else {
      std::cout << "Usage: smart_main  [-i/-d/-w/-f] xroc_config_file"
                << std::endl;
      return 0;
    }
    config_file = std::string(argv[2]);
  }

  signal(SIGINT, signal_handle);
  signal(SIGSEGV, signal_handle);

  // for 96board: 需要ap侧先从/dev/video3拉去视频流，
  // 然后cp vio再启动mipi bypass，暂时可以利用hbipc初始化
  // 需要握手（会阻塞）来实现，这里要求hbipcplugin先于vioplugin
  // 完成初始化。
//  auto hbipc_plg =
//    std::make_shared<HbipcPlugin>("./configs/hbipc_config.json");
  auto vio_plg = std::make_shared<VioPlugin>("./configs/vio_config.json");
  auto smart_plg = std::make_shared<SmartPlugin>(config_file);

//  hbipc_plg->Init();
  vio_plg->Init();
  smart_plg->Init();

//  g_ctx.plugins.push_back(hbipc_plg);
  g_ctx.plugins.push_back(vio_plg);
  g_ctx.plugins.push_back(smart_plg);

  for (auto& plugin : g_ctx.plugins) {
    plugin->Start();
  }

  while (!g_ctx.exit) {
    std::this_thread::sleep_for(milliseconds(40));
  }

  for (auto& plugin : g_ctx.plugins) {
    plugin->Stop();
  }

  return 0;
}
