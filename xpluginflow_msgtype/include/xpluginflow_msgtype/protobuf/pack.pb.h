// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pack.proto

#ifndef PROTOBUF_pack_2eproto__INCLUDED
#define PROTOBUF_pack_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)

namespace pack {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_pack_2eproto();
void protobuf_AssignDesc_pack_2eproto();
void protobuf_ShutdownFile_pack_2eproto();

class Addition;
class Check;
class Frame;
class MessagePack;

enum Frame_FrameType {
  Frame_FrameType_Unkown = 0,
  Frame_FrameType_SmartFrame = 1,
  Frame_FrameType_DropFrame = 2,
  Frame_FrameType_ErrorFrame = 3,
  Frame_FrameType_Frame_FrameType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Frame_FrameType_Frame_FrameType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Frame_FrameType_IsValid(int value);
const Frame_FrameType Frame_FrameType_FrameType_MIN = Frame_FrameType_Unkown;
const Frame_FrameType Frame_FrameType_FrameType_MAX = Frame_FrameType_ErrorFrame;
const int Frame_FrameType_FrameType_ARRAYSIZE = Frame_FrameType_FrameType_MAX + 1;

enum MessagePack_Flow {
  MessagePack_Flow_Unknown = 0,
  MessagePack_Flow_AP2CP = 1,
  MessagePack_Flow_CP2AP = 2,
  MessagePack_Flow_MessagePack_Flow_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MessagePack_Flow_MessagePack_Flow_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MessagePack_Flow_IsValid(int value);
const MessagePack_Flow MessagePack_Flow_Flow_MIN = MessagePack_Flow_Unknown;
const MessagePack_Flow MessagePack_Flow_Flow_MAX = MessagePack_Flow_CP2AP;
const int MessagePack_Flow_Flow_ARRAYSIZE = MessagePack_Flow_Flow_MAX + 1;

enum MessagePack_Type {
  MessagePack_Type_kUnknown = 0,
  MessagePack_Type_kXPlugin = 1,
  MessagePack_Type_kXConfig = 2,
  MessagePack_Type_MessagePack_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MessagePack_Type_MessagePack_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MessagePack_Type_IsValid(int value);
const MessagePack_Type MessagePack_Type_Type_MIN = MessagePack_Type_kUnknown;
const MessagePack_Type MessagePack_Type_Type_MAX = MessagePack_Type_kXConfig;
const int MessagePack_Type_Type_ARRAYSIZE = MessagePack_Type_Type_MAX + 1;

// ===================================================================

class Frame : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pack.Frame) */ {
 public:
  Frame();
  virtual ~Frame();

  Frame(const Frame& from);

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }

  static const Frame& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Frame* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Frame* other);

  // implements Message ----------------------------------------------

  inline Frame* New() const { return New(NULL); }

  Frame* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Frame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef Frame_FrameType FrameType;
  static const FrameType Unkown =
    Frame_FrameType_Unkown;
  static const FrameType SmartFrame =
    Frame_FrameType_SmartFrame;
  static const FrameType DropFrame =
    Frame_FrameType_DropFrame;
  static const FrameType ErrorFrame =
    Frame_FrameType_ErrorFrame;
  static inline bool FrameType_IsValid(int value) {
    return Frame_FrameType_IsValid(value);
  }
  static const FrameType FrameType_MIN =
    Frame_FrameType_FrameType_MIN;
  static const FrameType FrameType_MAX =
    Frame_FrameType_FrameType_MAX;
  static const int FrameType_ARRAYSIZE =
    Frame_FrameType_FrameType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional uint64 sequence_id_ = 1;
  void clear_sequence_id_();
  static const int kSequenceIdFieldNumber = 1;
  ::google::protobuf::uint64 sequence_id_() const;
  void set_sequence_id_(::google::protobuf::uint64 value);

  // optional uint64 timestamp_ = 2;
  void clear_timestamp_();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::uint64 timestamp_() const;
  void set_timestamp_(::google::protobuf::uint64 value);

  // optional .pack.Frame.FrameType frame_type_ = 3;
  void clear_frame_type_();
  static const int kFrameTypeFieldNumber = 3;
  ::pack::Frame_FrameType frame_type_() const;
  void set_frame_type_(::pack::Frame_FrameType value);

  // @@protoc_insertion_point(class_scope:pack.Frame)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::uint64 sequence_id__;
  ::google::protobuf::uint64 timestamp__;
  int frame_type__;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_pack_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_pack_2eproto();
  #endif
  friend void protobuf_AssignDesc_pack_2eproto();
  friend void protobuf_ShutdownFile_pack_2eproto();

  void InitAsDefaultInstance();
  static Frame* default_instance_;
};
// -------------------------------------------------------------------

class Check : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pack.Check) */ {
 public:
  Check();
  virtual ~Check();

  Check(const Check& from);

  inline Check& operator=(const Check& from) {
    CopyFrom(from);
    return *this;
  }

  static const Check& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Check* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Check* other);

  // implements Message ----------------------------------------------

  inline Check* New() const { return New(NULL); }

  Check* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Check& from);
  void MergeFrom(const Check& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Check* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes md5sum = 1;
  int md5sum_size() const;
  void clear_md5sum();
  static const int kMd5SumFieldNumber = 1;
  const ::std::string& md5sum(int index) const;
  ::std::string* mutable_md5sum(int index);
  void set_md5sum(int index, const ::std::string& value);
  void set_md5sum(int index, const char* value);
  void set_md5sum(int index, const void* value, size_t size);
  ::std::string* add_md5sum();
  void add_md5sum(const ::std::string& value);
  void add_md5sum(const char* value);
  void add_md5sum(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& md5sum() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_md5sum();

  // @@protoc_insertion_point(class_scope:pack.Check)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> md5sum_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_pack_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_pack_2eproto();
  #endif
  friend void protobuf_AssignDesc_pack_2eproto();
  friend void protobuf_ShutdownFile_pack_2eproto();

  void InitAsDefaultInstance();
  static Check* default_instance_;
};
// -------------------------------------------------------------------

class Addition : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pack.Addition) */ {
 public:
  Addition();
  virtual ~Addition();

  Addition(const Addition& from);

  inline Addition& operator=(const Addition& from) {
    CopyFrom(from);
    return *this;
  }

  static const Addition& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Addition* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Addition* other);

  // implements Message ----------------------------------------------

  inline Addition* New() const { return New(NULL); }

  Addition* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Addition& from);
  void MergeFrom(const Addition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Addition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pack.Check check_ = 1;
  bool has_check_() const;
  void clear_check_();
  static const int kCheckFieldNumber = 1;
  const ::pack::Check& check_() const;
  ::pack::Check* mutable_check_();
  ::pack::Check* release_check_();
  void set_allocated_check_(::pack::Check* check_);

  // optional .pack.Frame frame_ = 2;
  bool has_frame_() const;
  void clear_frame_();
  static const int kFrameFieldNumber = 2;
  const ::pack::Frame& frame_() const;
  ::pack::Frame* mutable_frame_();
  ::pack::Frame* release_frame_();
  void set_allocated_frame_(::pack::Frame* frame_);

  // @@protoc_insertion_point(class_scope:pack.Addition)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::pack::Check* check__;
  ::pack::Frame* frame__;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_pack_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_pack_2eproto();
  #endif
  friend void protobuf_AssignDesc_pack_2eproto();
  friend void protobuf_ShutdownFile_pack_2eproto();

  void InitAsDefaultInstance();
  static Addition* default_instance_;
};
// -------------------------------------------------------------------

class MessagePack : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pack.MessagePack) */ {
 public:
  MessagePack();
  virtual ~MessagePack();

  MessagePack(const MessagePack& from);

  inline MessagePack& operator=(const MessagePack& from) {
    CopyFrom(from);
    return *this;
  }

  static const MessagePack& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const MessagePack* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(MessagePack* other);

  // implements Message ----------------------------------------------

  inline MessagePack* New() const { return New(NULL); }

  MessagePack* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const MessagePack& from);
  void MergeFrom(const MessagePack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessagePack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef MessagePack_Flow Flow;
  static const Flow Unknown =
    MessagePack_Flow_Unknown;
  static const Flow AP2CP =
    MessagePack_Flow_AP2CP;
  static const Flow CP2AP =
    MessagePack_Flow_CP2AP;
  static inline bool Flow_IsValid(int value) {
    return MessagePack_Flow_IsValid(value);
  }
  static const Flow Flow_MIN =
    MessagePack_Flow_Flow_MIN;
  static const Flow Flow_MAX =
    MessagePack_Flow_Flow_MAX;
  static const int Flow_ARRAYSIZE =
    MessagePack_Flow_Flow_ARRAYSIZE;

  typedef MessagePack_Type Type;
  static const Type kUnknown =
    MessagePack_Type_kUnknown;
  static const Type kXPlugin =
    MessagePack_Type_kXPlugin;
  static const Type kXConfig =
    MessagePack_Type_kXConfig;
  static inline bool Type_IsValid(int value) {
    return MessagePack_Type_IsValid(value);
  }
  static const Type Type_MIN =
    MessagePack_Type_Type_MIN;
  static const Type Type_MAX =
    MessagePack_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    MessagePack_Type_Type_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional .pack.MessagePack.Flow flow_ = 1;
  void clear_flow_();
  static const int kFlowFieldNumber = 1;
  ::pack::MessagePack_Flow flow_() const;
  void set_flow_(::pack::MessagePack_Flow value);

  // optional .pack.MessagePack.Type type_ = 2;
  void clear_type_();
  static const int kTypeFieldNumber = 2;
  ::pack::MessagePack_Type type_() const;
  void set_type_(::pack::MessagePack_Type value);

  // optional .pack.Addition addition_ = 3;
  bool has_addition_() const;
  void clear_addition_();
  static const int kAdditionFieldNumber = 3;
  const ::pack::Addition& addition_() const;
  ::pack::Addition* mutable_addition_();
  ::pack::Addition* release_addition_();
  void set_allocated_addition_(::pack::Addition* addition_);

  // optional bytes content_ = 4;
  void clear_content_();
  static const int kContentFieldNumber = 4;
  const ::std::string& content_() const;
  void set_content_(const ::std::string& value);
  void set_content_(const char* value);
  void set_content_(const void* value, size_t size);
  ::std::string* mutable_content_();
  ::std::string* release_content_();
  void set_allocated_content_(::std::string* content_);

  // @@protoc_insertion_point(class_scope:pack.MessagePack)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  int flow__;
  int type__;
  ::pack::Addition* addition__;
  ::google::protobuf::internal::ArenaStringPtr content__;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_pack_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_pack_2eproto();
  #endif
  friend void protobuf_AssignDesc_pack_2eproto();
  friend void protobuf_ShutdownFile_pack_2eproto();

  void InitAsDefaultInstance();
  static MessagePack* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Frame

// optional uint64 sequence_id_ = 1;
inline void Frame::clear_sequence_id_() {
  sequence_id__ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Frame::sequence_id_() const {
  // @@protoc_insertion_point(field_get:pack.Frame.sequence_id_)
  return sequence_id__;
}
inline void Frame::set_sequence_id_(::google::protobuf::uint64 value) {
  
  sequence_id__ = value;
  // @@protoc_insertion_point(field_set:pack.Frame.sequence_id_)
}

// optional uint64 timestamp_ = 2;
inline void Frame::clear_timestamp_() {
  timestamp__ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Frame::timestamp_() const {
  // @@protoc_insertion_point(field_get:pack.Frame.timestamp_)
  return timestamp__;
}
inline void Frame::set_timestamp_(::google::protobuf::uint64 value) {
  
  timestamp__ = value;
  // @@protoc_insertion_point(field_set:pack.Frame.timestamp_)
}

// optional .pack.Frame.FrameType frame_type_ = 3;
inline void Frame::clear_frame_type_() {
  frame_type__ = 0;
}
inline ::pack::Frame_FrameType Frame::frame_type_() const {
  // @@protoc_insertion_point(field_get:pack.Frame.frame_type_)
  return static_cast< ::pack::Frame_FrameType >(frame_type__);
}
inline void Frame::set_frame_type_(::pack::Frame_FrameType value) {
  
  frame_type__ = value;
  // @@protoc_insertion_point(field_set:pack.Frame.frame_type_)
}

// -------------------------------------------------------------------

// Check

// repeated bytes md5sum = 1;
inline int Check::md5sum_size() const {
  return md5sum_.size();
}
inline void Check::clear_md5sum() {
  md5sum_.Clear();
}
inline const ::std::string& Check::md5sum(int index) const {
  // @@protoc_insertion_point(field_get:pack.Check.md5sum)
  return md5sum_.Get(index);
}
inline ::std::string* Check::mutable_md5sum(int index) {
  // @@protoc_insertion_point(field_mutable:pack.Check.md5sum)
  return md5sum_.Mutable(index);
}
inline void Check::set_md5sum(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pack.Check.md5sum)
  md5sum_.Mutable(index)->assign(value);
}
inline void Check::set_md5sum(int index, const char* value) {
  md5sum_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pack.Check.md5sum)
}
inline void Check::set_md5sum(int index, const void* value, size_t size) {
  md5sum_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pack.Check.md5sum)
}
inline ::std::string* Check::add_md5sum() {
  // @@protoc_insertion_point(field_add_mutable:pack.Check.md5sum)
  return md5sum_.Add();
}
inline void Check::add_md5sum(const ::std::string& value) {
  md5sum_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pack.Check.md5sum)
}
inline void Check::add_md5sum(const char* value) {
  md5sum_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pack.Check.md5sum)
}
inline void Check::add_md5sum(const void* value, size_t size) {
  md5sum_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pack.Check.md5sum)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Check::md5sum() const {
  // @@protoc_insertion_point(field_list:pack.Check.md5sum)
  return md5sum_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Check::mutable_md5sum() {
  // @@protoc_insertion_point(field_mutable_list:pack.Check.md5sum)
  return &md5sum_;
}

// -------------------------------------------------------------------

// Addition

// optional .pack.Check check_ = 1;
inline bool Addition::has_check_() const {
  return !_is_default_instance_ && check__ != NULL;
}
inline void Addition::clear_check_() {
  if (GetArenaNoVirtual() == NULL && check__ != NULL) delete check__;
  check__ = NULL;
}
inline const ::pack::Check& Addition::check_() const {
  // @@protoc_insertion_point(field_get:pack.Addition.check_)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return check__ != NULL ? *check__ : *default_instance().check__;
#else
  return check__ != NULL ? *check__ : *default_instance_->check__;
#endif
}
inline ::pack::Check* Addition::mutable_check_() {
  
  if (check__ == NULL) {
    check__ = new ::pack::Check;
  }
  // @@protoc_insertion_point(field_mutable:pack.Addition.check_)
  return check__;
}
inline ::pack::Check* Addition::release_check_() {
  // @@protoc_insertion_point(field_release:pack.Addition.check_)
  
  ::pack::Check* temp = check__;
  check__ = NULL;
  return temp;
}
inline void Addition::set_allocated_check_(::pack::Check* check_) {
  delete check__;
  check__ = check_;
  if (check_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pack.Addition.check_)
}

// optional .pack.Frame frame_ = 2;
inline bool Addition::has_frame_() const {
  return !_is_default_instance_ && frame__ != NULL;
}
inline void Addition::clear_frame_() {
  if (GetArenaNoVirtual() == NULL && frame__ != NULL) delete frame__;
  frame__ = NULL;
}
inline const ::pack::Frame& Addition::frame_() const {
  // @@protoc_insertion_point(field_get:pack.Addition.frame_)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return frame__ != NULL ? *frame__ : *default_instance().frame__;
#else
  return frame__ != NULL ? *frame__ : *default_instance_->frame__;
#endif
}
inline ::pack::Frame* Addition::mutable_frame_() {
  
  if (frame__ == NULL) {
    frame__ = new ::pack::Frame;
  }
  // @@protoc_insertion_point(field_mutable:pack.Addition.frame_)
  return frame__;
}
inline ::pack::Frame* Addition::release_frame_() {
  // @@protoc_insertion_point(field_release:pack.Addition.frame_)
  
  ::pack::Frame* temp = frame__;
  frame__ = NULL;
  return temp;
}
inline void Addition::set_allocated_frame_(::pack::Frame* frame_) {
  delete frame__;
  frame__ = frame_;
  if (frame_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pack.Addition.frame_)
}

// -------------------------------------------------------------------

// MessagePack

// optional .pack.MessagePack.Flow flow_ = 1;
inline void MessagePack::clear_flow_() {
  flow__ = 0;
}
inline ::pack::MessagePack_Flow MessagePack::flow_() const {
  // @@protoc_insertion_point(field_get:pack.MessagePack.flow_)
  return static_cast< ::pack::MessagePack_Flow >(flow__);
}
inline void MessagePack::set_flow_(::pack::MessagePack_Flow value) {
  
  flow__ = value;
  // @@protoc_insertion_point(field_set:pack.MessagePack.flow_)
}

// optional .pack.MessagePack.Type type_ = 2;
inline void MessagePack::clear_type_() {
  type__ = 0;
}
inline ::pack::MessagePack_Type MessagePack::type_() const {
  // @@protoc_insertion_point(field_get:pack.MessagePack.type_)
  return static_cast< ::pack::MessagePack_Type >(type__);
}
inline void MessagePack::set_type_(::pack::MessagePack_Type value) {
  
  type__ = value;
  // @@protoc_insertion_point(field_set:pack.MessagePack.type_)
}

// optional .pack.Addition addition_ = 3;
inline bool MessagePack::has_addition_() const {
  return !_is_default_instance_ && addition__ != NULL;
}
inline void MessagePack::clear_addition_() {
  if (GetArenaNoVirtual() == NULL && addition__ != NULL) delete addition__;
  addition__ = NULL;
}
inline const ::pack::Addition& MessagePack::addition_() const {
  // @@protoc_insertion_point(field_get:pack.MessagePack.addition_)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return addition__ != NULL ? *addition__ : *default_instance().addition__;
#else
  return addition__ != NULL ? *addition__ : *default_instance_->addition__;
#endif
}
inline ::pack::Addition* MessagePack::mutable_addition_() {
  
  if (addition__ == NULL) {
    addition__ = new ::pack::Addition;
  }
  // @@protoc_insertion_point(field_mutable:pack.MessagePack.addition_)
  return addition__;
}
inline ::pack::Addition* MessagePack::release_addition_() {
  // @@protoc_insertion_point(field_release:pack.MessagePack.addition_)
  
  ::pack::Addition* temp = addition__;
  addition__ = NULL;
  return temp;
}
inline void MessagePack::set_allocated_addition_(::pack::Addition* addition_) {
  delete addition__;
  addition__ = addition_;
  if (addition_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pack.MessagePack.addition_)
}

// optional bytes content_ = 4;
inline void MessagePack::clear_content_() {
  content__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessagePack::content_() const {
  // @@protoc_insertion_point(field_get:pack.MessagePack.content_)
  return content__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessagePack::set_content_(const ::std::string& value) {
  
  content__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pack.MessagePack.content_)
}
inline void MessagePack::set_content_(const char* value) {
  
  content__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pack.MessagePack.content_)
}
inline void MessagePack::set_content_(const void* value, size_t size) {
  
  content__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pack.MessagePack.content_)
}
inline ::std::string* MessagePack::mutable_content_() {
  
  // @@protoc_insertion_point(field_mutable:pack.MessagePack.content_)
  return content__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessagePack::release_content_() {
  // @@protoc_insertion_point(field_release:pack.MessagePack.content_)
  
  return content__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessagePack::set_allocated_content_(::std::string* content_) {
  if (content_ != NULL) {
    
  } else {
    
  }
  content__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content_);
  // @@protoc_insertion_point(field_set_allocated:pack.MessagePack.content_)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pack

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pack::Frame_FrameType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::pack::MessagePack_Flow> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::pack::MessagePack_Type> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pack_2eproto__INCLUDED
